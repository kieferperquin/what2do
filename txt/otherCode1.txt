const express = require('express');
const app = express();

const { Client, GatewayIntentBits } = require('discord.js');
const client = new Client({ intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent] });

const prefix = '!';

const lists = {};

var http = require('http'); 
http.createServer(function (req, res) {
   res.write("I'm alive"); 
   res.end(); 
}).listen(8080);

bot.on('ready', () => {
   console.log('Your Bot is now Online.');
   let activities = [`Do you know what to do?`, `Need help?`, `You good?` ], i = 0;
   setInterval(() => bot.user.setActivity(`${activities[i++ % activities.length]}`), 5000);
});

client.on('ready', () => {
  console.log(`Logged in as ${client.user.tag}!`);
});

client.on('messageCreate', async message => {
  if (message.author.bot) return;

  if (!message.content.startsWith(prefix)) {
    message.reply('wrong prefix or not for me');
    return;
  }

  const args = message.content.slice(prefix.length).trim().split(/ +/g);
  const command = args.shift().toLowerCase();

  switch (command) {
    case 'help':
      message.reply(`the commands are:\n
        • \`prefix\`\`newlist <name>\`: Create a new list with the specified name.
        • \`prefix\`\`add <list name> <item>\`: Add an item to an existing list.
        • \`prefix\`\`remove <list name> <item>\`: Remove an item from an existing list.
        • \`prefix\`\`lists\`: Display the names of all existing lists.
        • \`prefix\`\`random <list name> [item, item, ...]\`: Get a random item from an existing list, excluding any items specified in the message.`);
      break;

    case 'newlist':
      const listName = args[0];
      if (listName) {
        if (!lists[listName]) {
          lists[listName] = [];
          message.reply(`List '${listName}' created.`);
        } else {
          message.reply(`List '${listName}' already exists.`);
        }
      } else {
        message.reply('You need to provide a name for the new list.');
      }
      break;

    case 'add':
      const listToAdd = args[0];
      const itemToAdd = args.slice(1).join(' ');
      if (listToAdd && itemToAdd) {
        if (lists[listToAdd]) {
          lists[listToAdd].push(itemToAdd);
          message.reply(`Item '${itemToAdd}' added to list '${listToAdd}'.`);
        } else {
          message.reply(`List '${listToAdd}' does not exist.`);
        }
      } else {
        message.reply('You need to provide the name of the list and the item to add.');
      }
      break;

    case 'remove':
      const listToRemove = args[0];
      const itemToRemove = args.slice(1).join(' ');
      if (listToRemove && itemToRemove) {
        if (lists[listToRemove]) {
          const index = lists[listToRemove].indexOf(itemToRemove);
          if (index !== -1) {
            lists[listToRemove].splice(index, 1);
            message.reply(`Item '${itemToRemove}' removed from list '${listToRemove}'.`);
          } else {
            message.reply(`Item '${itemToRemove}' not found in list '${listToRemove}'.`);
          }
        } else {
          message.reply(`List '${listToRemove}' does not exist.`);
        }
      } else {
        message.reply('You need to provide the name of the list and the item to remove.');
      }
      break;

    case 'lists':
      const listNames = Object.keys(lists);
      if (listNames.length === 0) {
        message.reply('There are no lists.');
      } else {
        message.reply(`Lists:\n${listNames.map(name => `• ${name}(${lists[name].length}items)`).join('\n')}`);

      }
      break;

    case 'random':
      if (args.length > 1) {
        const listName = args[0];
        const excludedItems = args.slice(2).join(' ').split(',').map(item => item.trim());
        const targetList = lists[listName];

        if (targetList) {
          const filteredList = targetList.filter(item => !excludedItems.includes(item));
          if (filteredList.length) {
            const randomIndex = Math.floor(Math.random() * filteredList.length);
            const randomItem = filteredList[randomIndex];
            message.reply(`Random item from list '${listName}' is '${randomItem}'.`);
          } else {
            message.reply(`All items in list '${listName}' are excluded.`);
          }
        } else {
          message.reply(`List '${listName}' does not exist.`);
        }
      } else {
        message.reply('You need to provide the name of the list and at least one item to exclude.');
      }
      break;
  }
});

app.listen(3000, () => {
  console.log('Express server is listening on port 3000');
});

client.login(process.env.DISCORD_BOT_ID);